function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { BATCH_STATES, logger, merge, FILE_STATES } from "@rpldy/shared";
import { unwrap } from "@rpldy/simple-state";
import { UPLOADER_EVENTS, ITEM_FINALIZE_STATES } from "../consts";
var BATCH_READY_STATES = [BATCH_STATES.ADDED, BATCH_STATES.PROCESSING, BATCH_STATES.UPLOADING];

var getBatchFromState = function (state, id) {
  return state.batches[id].batch;
};

var getBatch = function (queue, id) {
  return getBatchFromState(queue.getState(), id);
};

var isItemBelongsToBatch = function (queue, itemId, batchId) {
  return queue.getState().items[itemId].batchId === batchId;
};

var getBatchDataFromItemId = function (queue, itemId) {
  var state = queue.getState();
  var item = state.items[itemId];
  return state.batches[item.batchId];
};

var getBatchFromItemId = function (queue, itemId) {
  return getBatchDataFromItemId(queue, itemId).batch;
};

var removeBatchItems = function (queue, batchId) {
  var batch = getBatch(queue, batchId);
  queue.updateState(function (state) {
    batch.items.forEach(function (_ref) {
      var id = _ref.id;
      delete state.items[id];
      var index = state.itemQueue.indexOf(id);

      if (~index) {
        state.itemQueue.splice(index, 1);
      }
    });
  });
};

var removeBatch = function (queue, batchId) {
  queue.updateState(function (state) {
    delete state.batches[batchId];
  });
};

var cancelBatchForItem = function (queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId),
      batchId = batch.id;
  logger.debugLog("uploady.uploader.processor: cancelling batch: ", {
    batch: batch
  });
  queue.updateState(function (state) {
    var batch = getBatchFromState(state, batchId);
    batch.state = BATCH_STATES.CANCELLED;
  });
  triggerUploaderBatchEvent(queue, batchId, UPLOADER_EVENTS.BATCH_CANCEL);
  removeBatchItems(queue, batchId);
  removeBatch(queue, batchId);
};

var isNewBatchStarting = function (queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId);
  return queue.getState().currentBatch !== batch.id;
};

var loadNewBatchForItem = function (queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId);
  return queue.runCancellable(UPLOADER_EVENTS.BATCH_START, batch).then(function (isCancelled) {
    if (!isCancelled) {
      queue.updateState(function (state) {
        state.currentBatch = batch.id;
      });
    }

    return !isCancelled;
  });
};

var isBatchFinished = function (queue) {
  var itemQueue = queue.getState().itemQueue;
  return itemQueue.length === 0 || isNewBatchStarting(queue, itemQueue[0]);
};

var cleanUpFinishedBatch = function (queue) {
  var state = queue.getState();
  var batchId = state.currentBatch;

  if (batchId && state.batches[batchId] && isBatchFinished(queue)) {
    triggerUploaderBatchEvent(queue, batchId, UPLOADER_EVENTS.BATCH_FINISH);
    removeBatchItems(queue, batchId);
    removeBatch(queue, batchId);
  }
};

var triggerUploaderBatchEvent = function (queue, batchId, event) {
  var state = queue.getState(),
      batch = getBatchFromState(state, batchId),
      //get the most uptodate batch data
  stateItems = state.items;

  var eventBatch = _objectSpread(_objectSpread({}, unwrap(batch)), {}, {
    items: batch.items.map(function (_ref2) {
      var id = _ref2.id;
      return unwrap(stateItems[id]);
    })
  });

  queue.trigger(event, eventBatch);
};

var getIsItemBatchReady = function (queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId);
  return BATCH_READY_STATES.includes(batch.state);
};

var detachRecycledFromPreviousBatch = function (queue, item) {
  var previousBatch = item.previousBatch;

  if (item.recycled && previousBatch && queue.getState().batches[previousBatch]) {
    var _getBatchFromItemId = getBatchFromItemId(queue, item.id),
        batchId = _getBatchFromItemId.id;

    if (batchId === previousBatch) {
      queue.updateState(function (state) {
        var batch = getBatchFromState(state, batchId);
        var index = batch.items.findIndex(function (_ref3) {
          var id = _ref3.id;
          return id === item.id;
        });

        if (~index) {
          batch.items.splice(index, 1);
        }
      });
    }
  }
};

var preparePendingForUpload = function (queue, uploadOptions) {
  queue.updateState(function (state) {
    //remove pending state from pending batches
    Object.keys(state.batches).forEach(function (batchId) {
      var batchData = state.batches[batchId];
      var batch = batchData.batch,
          batchOptions = batchData.batchOptions;

      if (batch.state === BATCH_STATES.PENDING) {
        batch.items.forEach(function (item) {
          item.state = FILE_STATES.ADDED;
        });
        batch.state = BATCH_STATES.ADDED;
        batchData.batchOptions = merge({}, batchOptions, uploadOptions);
      }
    });
  });
};

var removePendingBatches = function (queue) {
  var batches = queue.getState().batches;
  Object.keys(batches).filter(function (batchId) {
    return batches[batchId].batch.state === BATCH_STATES.PENDING;
  }).forEach(function (batchId) {
    removeBatchItems(queue, batchId);
    removeBatch(queue, batchId);
  });
};

var ensureNonUploadingBatchCleaned = function (queue, batchId) {
  var state = queue.getState(),
      batch = getBatchFromState(state, batchId);
  var activeItem = batch.items.find(function (item) {
    return !ITEM_FINALIZE_STATES.includes(item.state);
  }); //no active item left in batch, can remove it

  if (!activeItem) {
    removeBatchItems(queue, batchId);
    removeBatch(queue, batchId);
  }
};

export { isBatchFinished, loadNewBatchForItem, isNewBatchStarting, cancelBatchForItem, getBatchFromItemId, isItemBelongsToBatch, getBatchDataFromItemId, cleanUpFinishedBatch, triggerUploaderBatchEvent, getIsItemBatchReady, getBatchFromState, detachRecycledFromPreviousBatch, preparePendingForUpload, removePendingBatches, ensureNonUploadingBatchCleaned };